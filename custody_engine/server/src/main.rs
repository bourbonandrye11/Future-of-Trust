
// Import tonic (gRPC framework) and the generated Rust service types
mod bootstrap;
mod vault;
mod mpc;
mod relay;
mod dkg;
mod issuer;
mod service;
mod registry;

use bootstrap::init_bootstrap;

use service::vault_service::VaultService;
use service::dkg_service::CustodyDkgService;
use service::mpc_service::CustodyMpcService;
use service::issuer_service::IssuerService;
use service::relay_service::RelayService;

use tonic::transport::Server;
use vault::custody_vault_server::CustodyVaultServer;
use mpc::custody_mpc_server::CustodyMpcServer;
use dkg::custody_dkg_server::CustodyDkgServer;
use issuer::custody_issuer_server::CustodyIssuerServer;
use relay::custody_relay_server::CustodyRelayServer;

use std::sync::Arc;

// Load the generated Rust code from custody.proto (auto-generated by tonic_build)
// finished main says I don't need these. commenting out for now.
/*pub mod custody {
    tonic::include_proto!("custody");
}

pub mod custody_registry {
    tonic::include_proto!("custody_registry");
}

pub mod custodyrelay {
    tonic::include_proto!("custodyrelay");
}

pub mod custodyrelay {
    tonic::include_proto!("custodydkg");
}

pub mod custodyrelay {
    tonic::include_proto!("vault");
}

pub mod custodyrelay {
    tonic::include_proto!("mpc");
}

pub mod issuer {
    tonic::include_proto!("issuer");
}*/

// Start the gRPC server using the Tokio async runtime
#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Set up logging (e.g., info!, error!, etc.)
    tracing_subscriber::fmt::init();
    init_logging("/var/log/custody", true); // JSON preferred in prod

    // Output simple startup message to the console (visible to user)
    info!("Starting Custody gRPC Server on [::1}:50051");

    // Step 1: Bootstrap identity + DNS peers
    let boot = init_bootstrap("custody-nodes.default.svc.cluster.local").await?;

    // Step 2: Initialize core state
    // I think it left out issuer_registry
    let registry = Arc::new(registry::OperationalDIDRegistry::new());
    let relay = Arc::new(relay::RelayClient::new(&boot.local_node_id));
    let dkg_engine = Arc::new(dkg::engine::DKGEngine::new(
        registry.clone(),
        relay.clone(),
        boot.local_node_id.clone(),
    ));

    // Step 3: Mount all services
    let vault_service = VaultService { registry: registry.clone() };
    let relay_service = RelayService {
        dkg_engine: dkg_engine.clone(),
        local_node_id: boot.local_node_id.clone(),
    };
    let dkg_service = CustodyDkgService {
        dkg_engine: dkg_engine.clone(),
    };
    let mpc_service = CustodyMpcService {
        coordinator: mpc::coordinator::MPCSigningCoordinator {
            registry: registry.clone(),
            relay: relay.clone(),
            local_node_id: boot.local_node_id.clone(),
        },
    };
    let issuer_service = IssuerService {}; // Stateless

    println!("ðŸš€ Custody Engine starting on {}", boot.relay_bind);



    // Initialize custody management service
    // this one can probably be removed
    let custody_mgmt_service = CustodyManagementServer {
        registry: did_registry.clone(),
    };

    // this i think needs to stay
    let vc_service = CustodyVcService {
        issuer_registry: IssuerRegistry::new();
    };

    // Start the gRPC server and bind our service handlers (to be implemented)
    server::builder()
        .add_service(KeyServiceServer::new(MyKeyService::default()))
        .add_service(SigningServiceServer::new(MySigningService::default()))
        .add_service(HealthServiceServer::new(MyHealthService::default()))
        .add_service(CustodyManagementServiceServer::new(custody_mgmt_service))
        .add_service(CustodyRelayServer::new(relay_service))
        .add_service(CustodyDkgServer::new(dkg_service))
        .add_service(CustodyVaultServer::new(vault_service))
        .add_service(CustodyMpcServer::new(mpc_service))
        .add_service(CustodyIssuerServer::new(issuer_service))
        .add_service(CustodyVcServer::new(vc_service))
       // .serve("[::1]:50051".parse()?)
        .serve(boot.relay_bind)
        .await?;
    Ok(())
}

// Use TLS/mTLS â†’ add .tls_config(...) to the server builder
// We can skip TLS for local dev but should include it for production.
// to run the gRPC server
// cargo run -p custody_server

// then check health endpoint useing grpcurl
// grpcurl -plaintext localhost:50051 custody.HealthService/Check