
syntax = "proto3";

package custody;

// Key Generation Service
service KeyService {
    rpc GenerateKeySet (GenerateKeyRequest) returns (GenerateKeyResponse);
}

message GenerateKeyRequest { 
    uint32 threshold = 1;
    uint32 participants = 2;
}

message GenerateKeyResponse {
    repeated bytes sealed_shards = 1;
    bytes group_public_key = 2;
}

// Signing Service
service SigningService {
    rpc CreateSession (CreateSessionRequest) returns (CreateSessionResponse);
    rpc SubmitSignatureShare (SubmitSignatureShareRequest) returns (SubmitSignatureShareResponse);
    rpc AggregateSignature (AggregateSignatureRequest) returns (AggregateSignatureResposne);
}

message CreateSessionRequest {
    string message = 1;
    uint32 threshold = 2;
    bytes group_public_key = 3;
}

message CreateSessionResponse {
    string session_id = 1;
    bytes commitment = 2;
}

message SubmitSignatureShareRequest {
    string session_id = 1;
    uint32 participant_id = 2;
    bytes signature_share = 3;
}

message SubmitSignatureShareResponse {
    string status = 1;
}

message AggregateSignatureRequest {
  string session_id = 1;
}

message AggregateSignatureResponse {
  bytes full_signature = 1;
}

// Health Check
service HealthService {
  rpc Check (HealthCheckRequest) returns (HealthCheckResponse);
}

message HealthCheckRequest {}

message HealthCheckResponse {
  string status = 1;
}

// ==========================
// Custody Management Service
// ==========================

service CustodyManagementService {
    rpc ProvisionIdentityMaterial(ProvisionIdentityMaterialRequest) returns (ProvisionIdentityMaterialResponse);
    rpc StoreDIDDocument(StoreDIDDocumentRequest) returns (StoreDIDDocumentResponse);
    rpc GetDIDDocument(GetDIDDocumentRequest) returns (GetDIDDocumentResponse);

    rpc RegisterOperationalDID(RegisterOperationalDIDRequest) returns (RegisterOperationalDIDResponse);
    rpc RotateOperationalDID(RotateOperationalDIDRequest) returns (RotateOperationalDIDResponse);
    rpc RevokeOperationalDID(RevokeOperationalDIDRequest) returns (RevokeOperationalDIDResponse);

    rpc AddOrRotateVCs(AddOrRotateVCsRequest) returns (AddOrRotateVCsResponse);
    rpc GetVCsForOperationalDID(GetVCsForOperationalDIDRequest) returns (GetVCsForOperationalDIDResponse);
    rpc VerifyVCIntegrity(VerifyVCIntegrityRequest) returns (VerifyVCIntegrityResponse);

    rpc GetVCAuditTrail(GetVCAuditTrailRequest) returns (GetVCAuditTrailResponse);
}

// ==========================
// Custody VC Service
// ==========================

service CustodyVC {
    // need to look at integrating these later. this was skimmed over after VCManager.
    // =================================================================================
    rpc SignCredential(SignCredentialRequest) returns (SignCredentialResponse);
    rpc StoreCredential(StoreCredentialRequest) returns (StoreCredentialResponse);
    rpc GetCredential(GetCredentialRequest) returns (GetCredentialResponse);
    rpc RevokeCredential(RevokeCredentialRequest) returns (RevokeCredentialResponse);

    rpc GetVcByType(GetVcByTypeRequest) returns (GetVcByTypeResponse);
    rpc DeleteVc(DeleteVcRequest) returns (DeleteVcResponse);

    rpc GetBbsPrivateKey(GetBbsKeyRequest) returns (GetBbsKeyResponse);
    rpc SetBbsPrivateKey(SetBbsKeyRequest) returns (SetBbsKeyResponse);
    rpc GetBbsPublicKey(GetBbsKeyRequest) returns (GetBbsKeyResponse);
    rpc SetBbsPublicKey(SetBbsKeyRequest) returns (SetBbsKeyResponse);

    rpc GetPublicKeys(GetPublicKeysRequest) returns (GetPublicKeysResponse);
    rpc AddPublicKey(AddPublicKeyRequest) returns (PublicKeyUpdateResponse);
    rpc RemovePublicKey(RemovePublicKeyRequest) returns (PublicKeyUpdateResponse);

    rpc GenerateIssuerKeys(GenerateIssuerKeysRequest) returns (GenerateIssuerKeysResponse);
    // ==================================================================================
}

// ==========================
// Custody Vault Service DKG
// ==========================

service CustodyVaultService {
    // Launches DKG setup on a vault
    rpc StartDKGSession(StartDKGSessionRequest) returns (StartDKGSessionResponse);
    // Vault-to-vault message passing
    rpc SubmitDKGMessage(SubmitDKGMessageRequest) returns (SubmitDKGMessageResponse);
    // Finalizes dKG and returns the public key commitment
    rpc CompleteDKGSession(CompleteDKGSessionRequest) returns (CompleteDKGSessionResponse);
    rpc RequestPartialSignature(RequestPartialSignatureRequest) returns (RequestPartialSignatureResponse);
}

// ==========================
// Message Types
// ==========================

// Generic identifiers
message OperationalDID {
    string id = 1;
}

message RootDID {
    string id = 1;
}

message VerifiableCredential {
    bytes payload = 1; // Raw VC bytes (likely JSON-LD or JWT)
}

// ==========================
// DKG Coordination
// ==========================

message StartDKGSessionRequest {
    string group_id = 1;
    string operational_did = 2;
    uint32 threshold = 3;
    repeated string participant_nodes = 4;
}

message StartDKGSessionResponse {
    bool success = 1;
}

message SubmitDKGMessageRequest {
    string group_id = 1;
    string sender_node_id = 2;
    bytes dkg_payload = 3;
}

message SubmitDKGMessageResponse {
    bool success = 1;
}

message CompleteDKGSessionRequest {
    string group_id = 1;
}

message CompleteDKGSessionResponse {
    bytes public_key_commitment = 1;
}

// For partial signing across custody nodes
message RequestPartialSignatureRequest {
    string operational_did = 1;
    bytes message = 2;
}

message RequestPartialSignatureResponse {
    bytes partial_signature = 1;
}

// ==========================
// DID Management Requests
// ==========================

message StoreDIDDocumentRequest {
    string operational_did = 1;
    string root_did = 2;
    bytes did_document = 3; // Serialized JSON-LD or CBOR DID doc sent from identity engine
}

message StoreDIDDocumentResponse {
    bool success = 1;
    string message = 2;
}

message GetDIDDocumentRequest {
    string operational_did = 1;
}

message GetDIDDocumentResponse {
    bytes did_document = 1;
    bool found = 2;
}

message RegisterOperationalDIDRequest {
  OperationalDID operational_did = 1;
  RootDID root_did = 2;
}

message RegisterOperationalDIDResponse {}

message RotateOperationalDIDRequest {
  OperationalDID old_did = 1;
  OperationalDID new_did = 2;
}

message RotateOperationalDIDResponse {}

message RevokeOperationalDIDRequest {
  OperationalDID operational_did = 1;
}

message RevokeOperationalDIDResponse {}

message GetRootForOperationalDIDRequest {
  OperationalDID operational_did = 1;
}

message GetRootForOperationalDIDResponse {
  RootDID root_did = 1;
}

// ==========================
// VC Management Requests
// ==========================

message ProvisionIdentityMaterialRequest {
    string operational_did = 1; // Provided by Identity Engine
    string root_did = 2; // Provided by Identity Engine
    string identity_alias = 3; // optional, e.g., human-readable label
}

message ProvisionIdentityMaterialResponse {
    bytes public_key_commitment = 1; // Custody-Backed public key or proof
    string vault_reference = 2; // Internal vault ID or handle
    bytes custody_proof = 3; // optional future field for ZKP or attestation
}

message AddOrRotateVCsRequest {
    OperationalDID operational_did = 1;
    repeated VerifiableCredential vcs = 2;
}

message AddOrRotateVCsResponse{}

message GetVCsForOperationalDIDRequest {
  OperationalDID operational_did = 1;
}

message GetVCsForOperationalDIDResponse {
  repeated VerifiableCredential vcs = 1;
}

message VerifyVCIntegrityRequest {
  OperationalDID operational_did = 1;
  VerifiableCredential vc = 2;
}

message VerifyVCIntegrityResponse {
  bool valid = 1;
}

// ==========================
// Audit Trail Requests
// ==========================

message GetVCAuditTrailRequest {
  OperationalDID operational_did = 1;
}

message AuditRecord {
  string event_type = 1;
  string message = 2;
  string timestamp = 3;
}

message GetVCAuditTrailResponse {
  repeated AuditRecord records = 1;
}

// ==========================
// sign, store, get, revoke, VC. This is a new section that might replace some of the others and need integration
// Custody VC Service
// ==========================

// Request to sign a VC
message SignCredentialRequest {
    string issuer_did = 1;
    string vc_json = 2;
    string vc_type = 3; // e.g., "root" or "attribute" NEW FIELD: allows caller to specify root or attribute VC
}

message SignCredentialResponse {
    string signed_vc_json = 1;
}

// Request to store a signed VC
message StoreCredentialRequest {
    string subject_did = 1;
    string signed_vc_json = 2;
}

message StoreCredentialResponse {
    bool success = 1;
}

// Request to retrieve a VC
message GetCredentialRequest {
    string subject_did = 1;
    string vc_id = 2;
}

message GetCredentialResponse {
    string signed_vc_json = 1;
}

// Request to revoke a VC
message RevokeCredentialRequest {
    string issuer_did = 1;
    string vc_id = 2;
}

message RevokeCredentialResponse {
    bool success = 1;
}

// Vault access: VC by type
message GetVcByTypeRequest {
  string vault_id = 1;
  string vc_type = 2;
}
message GetVcByTypeResponse {
  string vc_json = 1;
}

// VC Deletion
message DeleteVcRequest {
  string vault_id = 1;
  string vc_id = 2;
}
message DeleteVcResponse {
  bool success = 1;
}

// BBS+ keys
message GetBbsKeyRequest {
  string vault_id = 1;
}
message GetBbsKeyResponse {
  string key = 1;
}
message SetBbsKeyRequest {
  string vault_id = 1;
  string key = 1;
}
message SetBbsKeyResponse {
  bool success = 1;
}

// Public keys
message GetPublicKeysRequest {
  string vault_id = 1;
}
message GetPublicKeysResponse {
  repeated string keys = 1;
}
message AddPublicKeyRequest {
  string vault_id = 1;
  string key = 2;
}
message RemovePublicKeyRequest {
  string vault_id = 1;
  string key = 2;
}
message PublicKeyUpdateResponse {
  bool success = 1;
}

message GenerateIssuerKeysRequest {
  string issuer_did = 1;
}
message GenerateIssuerKeysResponse {
  string public_key = 1;
}